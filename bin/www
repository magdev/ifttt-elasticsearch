#!/usr/bin/env node
/**
 * Copyright (c) 2015, Marco Gr√§tsch <magdev3.0@gmail.com>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the <organization> nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var app = require('../app'),
    debug = require('debug')('ifttt-elasticsearch:server'),
    http = require('http'),
    https = require('https'),
    fs = require('fs'),
    

    normalizePort = function(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    },
    
    onError = function(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    },
    
    onListening = function() {
        var addr = server.address(),
            bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
        debug('Listening on ' + bind);
    };

var port = normalizePort(process.env.OPENSHIFT_NODEJS_PORT || app.get('config').app.options.httpServer.port || process.env.PORT || '3000'),
    sslport = normalizePort(process.env.OPENSHIFT_NODEJS_PORT || app.get('config').app.options.httpsServer.port || '3443'),
    ipaddr = process.env.OPENSHIFT_NODEJS_IP || '0.0.0.0';
app.set('port', port);
app.set('ssl port', sslport);
app.set('ipaddr', ipaddr);

var server = http.createServer(app);
server.listen(port, ipaddr);
server.on('error', onError);
server.on('listening', onListening);

var keyfile = app.get('config').app.options.httpsServer.keyfile,
    certfile = app.get('config').app.options.httpsServer.certfile;
if (keyfile && certfile) {
    var options = {
            key: fs.readFileSync(keyfile),
            cert: fs.readFileSync(certfile)
        };

    var sslserver = https.createServer(options, app);
    sslserver.listen(sslport, ipaddr);
    sslserver.on('error', onError);
    sslserver.on('listening', onListening);
}
